// <auto-generated />
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace Pommel.Generated
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::MagicOnion;
    using global::MagicOnion.Client;

    public static partial class MagicOnionInitializer
    {
        static bool isRegistered = false;

        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
        public static void Register()
        {
            if(isRegistered) return;
            isRegistered = true;

            MagicOnionClientRegistry<Pommel.Api.Services.IInGameService>.Register((x, y, z) => new Pommel.Api.Services.InGameServiceClient(x, y, z));

            StreamingHubClientRegistry<Pommel.Api.Hubs.IInGameHub, Pommel.Api.Hubs.IInGameReceiver>.Register((a, _, b, c, d, e) => new Pommel.Api.Hubs.InGameHubClient(a, b, c, d, e));
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace Pommel.Generated.Resolvers
{
    using System;
    using MessagePack;

    public class MagicOnionResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MagicOnionResolver();

        MagicOnionResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MagicOnionResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MagicOnionResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MagicOnionResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(2)
            {
                {typeof(global::MagicOnion.DynamicArgumentTuple<int, int>), 0 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<string, string, string>), 1 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MagicOnion.DynamicArgumentTupleFormatter<int, int>(default(int), default(int));
                case 1: return new global::MagicOnion.DynamicArgumentTupleFormatter<string, string, string>(default(string), default(string), default(string));
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace Pommel.Api.Services {
    using System;
    using MagicOnion;
    using MagicOnion.Client;
    using Grpc.Core;
    using MessagePack;

    [Ignore]
    public class InGameServiceClient : MagicOnionClientBase<global::Pommel.Api.Services.IInGameService>, global::Pommel.Api.Services.IInGameService
    {
        static readonly Method<byte[], byte[]> CreateRoomAsyncMethod;
        static readonly Func<RequestContext, ResponseContext> CreateRoomAsyncDelegate;
        static readonly Method<byte[], byte[]> EntryRoomAsyncMethod;
        static readonly Func<RequestContext, ResponseContext> EntryRoomAsyncDelegate;
        static readonly Method<byte[], byte[]> FindRoomByIdMethod;
        static readonly Func<RequestContext, ResponseContext> FindRoomByIdDelegate;

        static InGameServiceClient()
        {
            CreateRoomAsyncMethod = new Method<byte[], byte[]>(MethodType.Unary, "IInGameService", "CreateRoomAsync", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            CreateRoomAsyncDelegate = _CreateRoomAsync;
            EntryRoomAsyncMethod = new Method<byte[], byte[]>(MethodType.Unary, "IInGameService", "EntryRoomAsync", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            EntryRoomAsyncDelegate = _EntryRoomAsync;
            FindRoomByIdMethod = new Method<byte[], byte[]>(MethodType.Unary, "IInGameService", "FindRoomById", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            FindRoomByIdDelegate = _FindRoomById;
        }

        InGameServiceClient()
        {
        }

        public InGameServiceClient(CallInvoker callInvoker, MessagePackSerializerOptions serializerOptions, IClientFilter[] filters)
            : base(callInvoker, serializerOptions, filters)
        {
        }

        protected override MagicOnionClientBase<IInGameService> Clone()
        {
            var clone = new InGameServiceClient();
            clone.host = this.host;
            clone.option = this.option;
            clone.callInvoker = this.callInvoker;
            clone.serializerOptions = this.serializerOptions;
            clone.filters = filters;
            return clone;
        }

        public new IInGameService WithHeaders(Metadata headers)
        {
            return base.WithHeaders(headers);
        }

        public new IInGameService WithCancellationToken(System.Threading.CancellationToken cancellationToken)
        {
            return base.WithCancellationToken(cancellationToken);
        }

        public new IInGameService WithDeadline(System.DateTime deadline)
        {
            return base.WithDeadline(deadline);
        }

        public new IInGameService WithHost(string host)
        {
            return base.WithHost(host);
        }

        public new IInGameService WithOptions(CallOptions option)
        {
            return base.WithOptions(option);
        }
   
        static ResponseContext _CreateRoomAsync(RequestContext __context)
        {
            return CreateResponseContext<string>(__context, CreateRoomAsyncMethod);
        }

        public global::MagicOnion.UnaryResult<string> CreateRoomAsync()
        {
            return InvokeAsync<Nil, string>("IInGameService/CreateRoomAsync", Nil.Default, CreateRoomAsyncDelegate);
        }
        static ResponseContext _EntryRoomAsync(RequestContext __context)
        {
            return CreateResponseContext<DynamicArgumentTuple<string, string, string>, string>(__context, EntryRoomAsyncMethod);
        }

        public global::MagicOnion.UnaryResult<string> EntryRoomAsync(string roomId, string playerId, string playerName)
        {
            return InvokeAsync<DynamicArgumentTuple<string, string, string>, string>("IInGameService/EntryRoomAsync", new DynamicArgumentTuple<string, string, string>(roomId, playerId, playerName), EntryRoomAsyncDelegate);
        }
        static ResponseContext _FindRoomById(RequestContext __context)
        {
            return CreateResponseContext<string, global::Pommel.Api.Protocol.InGame.Room>(__context, FindRoomByIdMethod);
        }

        public global::MagicOnion.UnaryResult<global::Pommel.Api.Protocol.InGame.Room> FindRoomById(string roomId)
        {
            return InvokeAsync<string, global::Pommel.Api.Protocol.InGame.Room>("IInGameService/FindRoomById", roomId, FindRoomByIdDelegate);
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace Pommel.Api.Hubs {
    using Grpc.Core;
    using Grpc.Core.Logging;
    using MagicOnion;
    using MagicOnion.Client;
    using MessagePack;
    using System;
    using System.Threading.Tasks;

    [Ignore]
    public class InGameHubClient : StreamingHubClientBase<global::Pommel.Api.Hubs.IInGameHub, global::Pommel.Api.Hubs.IInGameReceiver>, global::Pommel.Api.Hubs.IInGameHub
    {
        static readonly Method<byte[], byte[]> method = new Method<byte[], byte[]>(MethodType.DuplexStreaming, "IInGameHub", "Connect", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);

        protected override Method<byte[], byte[]> DuplexStreamingAsyncMethod { get { return method; } }

        readonly global::Pommel.Api.Hubs.IInGameHub __fireAndForgetClient;

        public InGameHubClient(CallInvoker callInvoker, string host, CallOptions option, MessagePackSerializerOptions serializerOptions, ILogger logger)
            : base(callInvoker, host, option, serializerOptions, logger)
        {
            this.__fireAndForgetClient = new FireAndForgetClient(this);
        }
        
        public global::Pommel.Api.Hubs.IInGameHub FireAndForget()
        {
            return __fireAndForgetClient;
        }

        protected override void OnBroadcastEvent(int methodId, ArraySegment<byte> data)
        {
            switch (methodId)
            {
                case 2030761979: // OnRefresh
                {
                    var result = MessagePackSerializer.Deserialize<global::Pommel.Api.Protocol.InGame.Game>(data, serializerOptions);
                    receiver.OnRefresh(result); break;
                }
                default:
                    break;
            }
        }

        protected override void OnResponseEvent(int methodId, object taskCompletionSource, ArraySegment<byte> data)
        {
            switch (methodId)
            {
                case 1173640161: // CreateGameAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case 1849616495: // LayAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                default:
                    break;
            }
        }
   
        public global::System.Threading.Tasks.Task CreateGameAsync(string roomId)
        {
            return WriteMessageWithResponseAsync<string, Nil>(1173640161, roomId);
        }

        public global::System.Threading.Tasks.Task LayAsync(int x, int y)
        {
            return WriteMessageWithResponseAsync<DynamicArgumentTuple<int, int>, Nil>(1849616495, new DynamicArgumentTuple<int, int>(x, y));
        }


        class FireAndForgetClient : global::Pommel.Api.Hubs.IInGameHub
        {
            readonly InGameHubClient __parent;

            public FireAndForgetClient(InGameHubClient parentClient)
            {
                this.__parent = parentClient;
            }

            public global::Pommel.Api.Hubs.IInGameHub FireAndForget()
            {
                throw new NotSupportedException();
            }

            public Task DisposeAsync()
            {
                throw new NotSupportedException();
            }

            public Task WaitForDisconnect()
            {
                throw new NotSupportedException();
            }

            public global::System.Threading.Tasks.Task CreateGameAsync(string roomId)
            {
                return __parent.WriteMessageAsync<string>(1173640161, roomId);
            }

            public global::System.Threading.Tasks.Task LayAsync(int x, int y)
            {
                return __parent.WriteMessageAsync<DynamicArgumentTuple<int, int>>(1849616495, new DynamicArgumentTuple<int, int>(x, y));
            }

        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
